----------
//
DROP PROCEDURE IF EXISTS registroUsuario;
DELIMITER $$

CREATE PROCEDURE registroUsuario(
    IN p_nombre VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_telefono VARCHAR(20),
    IN p_contrasena VARCHAR(255),
    IN p_rol VARCHAR(50)
)
BEGIN
    DECLARE dominio VARCHAR(50) DEFAULT '@santateresita.ac.cr';

    -- Validar dominio en minúsculas y sin espacios
    IF RIGHT(LOWER(TRIM(p_email)), LENGTH(dominio)) = dominio THEN
        INSERT INTO USUARIO (Nombre, Email, Telefono, Contrasena, Rol, Estado)
        VALUES (p_nombre, TRIM(p_email), p_telefono, p_contrasena, p_rol, 'Activo');
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El correo debe ser institucional (@santateresita.ac.cr)';
    END IF;
END$$

DELIMITER ;


////////
CREATE DEFINER=`root`@`localhost` PROCEDURE `obtenerUsuarioDetalle`(IN p_id INT)
BEGIN
  SELECT * FROM vw_usuarios_detalle WHERE Id_Usuario = p_id;
END
//
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminarUsuarioFuerte`(IN p_id_usuario INT)
BEGIN
  DECLARE v_doc_cursos INT DEFAULT 0;
  DECLARE v_est_refs   INT DEFAULT 0;
  DECLARE v_otras_refs INT DEFAULT 0;

  -- Docente con cursos asignados
  SELECT COUNT(*) INTO v_doc_cursos FROM curso WHERE Id_Docente = p_id_usuario;

  -- Estudiante con registros académicos
  SELECT (SELECT COUNT(*) FROM matricula      WHERE Id_Estudiante = p_id_usuario)
       + (SELECT COUNT(*) FROM entrega_tarea  WHERE Id_Estudiante = p_id_usuario)
       + (SELECT COUNT(*) FROM calificacion   WHERE Id_Estudiante = p_id_usuario)
       + (SELECT COUNT(*) FROM asistencia     WHERE Id_Estudiante = p_id_usuario)
    INTO v_est_refs;

  -- Otras referencias directas por usuario
  SELECT (SELECT COUNT(*) FROM soporte      WHERE Id_Usuario = p_id_usuario)
       + (SELECT COUNT(*) FROM notificacion WHERE Id_Usuario = p_id_usuario)
    INTO v_otras_refs;

  IF v_doc_cursos > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'No se puede eliminar: el usuario es Docente con cursos asignados.';
  END IF;

  IF v_est_refs > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'No se puede eliminar: el usuario es Estudiante con registros académicos.';
  END IF;

  IF v_otras_refs > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'No se puede eliminar: el usuario tiene registros de soporte/notificaciones.';
  END IF;

  START TRANSACTION;
    DELETE FROM padre      WHERE Id_Padre      = p_id_usuario;
    DELETE FROM docente    WHERE Id_Docente    = p_id_usuario;
    DELETE FROM estudiante WHERE Id_Estudiante = p_id_usuario;
    DELETE FROM usuario    WHERE Id_Usuario    = p_id_usuario;
  COMMIT;
END
//
CREATE DEFINER=`root`@`localhost` PROCEDURE `desactivarUsuario`(
  IN p_id_usuario INT,
  IN p_nuevo_estado VARCHAR(10) -- 'Activo' | 'Inactivo'
)
BEGIN
  UPDATE usuario SET Estado = p_nuevo_estado WHERE Id_Usuario = p_id_usuario;
  CALL obtenerUsuarioDetalle(p_id_usuario);
END
//
CREATE DEFINER=`root`@`localhost` PROCEDURE `crearUsuarioAdmin`(
  IN p_nombre       VARCHAR(100),
  IN p_email        VARCHAR(100),
  IN p_telefono     VARCHAR(20),
  IN p_contrasena   VARCHAR(255),
  IN p_rol          VARCHAR(20),  -- 'Administrador'|'Docente'|'Estudiante'|'Padre'
  IN p_estado       VARCHAR(10),  -- 'Activo'|'Inactivo'
  IN p_grado        VARCHAR(10),  -- solo si Estudiante
  IN p_seccion      VARCHAR(10),  -- solo si Estudiante
  IN p_especialidad VARCHAR(100)  -- solo si Docente
)
BEGIN
  DECLARE v_dominio VARCHAR(50) DEFAULT '@santateresita.ac.cr';
  DECLARE v_email_limpio VARCHAR(100);
  DECLARE v_id INT;
  DECLARE v_dup INT DEFAULT 0;

  SET v_email_limpio = TRIM(LOWER(p_email));

  IF RIGHT(v_email_limpio, LENGTH(v_dominio)) <> v_dominio THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'El correo debe ser institucional (@santateresita.ac.cr)';
  END IF;

  SELECT COUNT(*) INTO v_dup FROM usuario WHERE Email = v_email_limpio;
  IF v_dup > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'El correo ya está registrado';
  END IF;

  START TRANSACTION;

  INSERT INTO usuario (Nombre, Email, Telefono, Contrasena, Rol, Estado)
  VALUES (p_nombre, v_email_limpio, p_telefono, p_contrasena, p_rol, p_estado);

  SET v_id = LAST_INSERT_ID();

  IF p_rol = 'Padre' THEN
      INSERT INTO padre (Id_Padre, Telefono) VALUES (v_id, p_telefono);
  ELSEIF p_rol = 'Docente' THEN
      INSERT INTO docente (Id_Docente, Especialidad) VALUES (v_id, p_especialidad);
  ELSEIF p_rol = 'Estudiante' THEN
      INSERT INTO estudiante (Id_Estudiante, Grado, Seccion) VALUES (v_id, p_grado, p_seccion);
  END IF;

  COMMIT;

  CALL obtenerUsuarioDetalle(v_id);
END
//
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizarUsuarioAdmin`(
  IN p_id_usuario   INT,
  IN p_nombre       VARCHAR(100),
  IN p_email        VARCHAR(100),
  IN p_telefono     VARCHAR(20),
  IN p_contrasena   VARCHAR(255), -- NULL: mantener
  IN p_rol_nuevo    VARCHAR(20),  -- 'Administrador'|'Docente'|'Estudiante'|'Padre'
  IN p_estado       VARCHAR(10),  -- 'Activo'|'Inactivo'
  IN p_grado        VARCHAR(10),  -- solo si Estudiante
  IN p_seccion      VARCHAR(10),  -- solo si Estudiante
  IN p_especialidad VARCHAR(100)  -- solo si Docente
)
BEGIN
  DECLARE v_dominio VARCHAR(50) DEFAULT '@santateresita.ac.cr';
  DECLARE v_email_limpio VARCHAR(100);
  DECLARE v_rol_actual VARCHAR(20);
  DECLARE v_existe INT DEFAULT 0;

  -- Normalizar email
  SET v_email_limpio = TRIM(LOWER(p_email));

  -- Validación de dominio
  IF RIGHT(v_email_limpio, LENGTH(v_dominio)) <> v_dominio THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'El correo debe ser institucional (@santateresita.ac.cr)';
  END IF;

  START TRANSACTION;

  -- Capturar rol actual
  SELECT Rol INTO v_rol_actual FROM usuario WHERE Id_Usuario = p_id_usuario FOR UPDATE;

  IF v_rol_actual IS NULL THEN
    ROLLBACK;
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Usuario no existe';
  END IF;

  -- Si cambia de Docente a otro rol, verificar cursos asignados
  IF v_rol_actual = 'Docente' AND p_rol_nuevo <> 'Docente' THEN
    SELECT COUNT(*) INTO v_existe FROM curso WHERE Id_Docente = p_id_usuario;
    IF v_existe > 0 THEN
      ROLLBACK;
      SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No se puede cambiar el rol: el usuario es Docente con cursos asignados. Reasigna los cursos primero.';
    END IF;
  END IF;

  -- Si cambia de Estudiante a otro rol, verificar dependencias académicas
  IF v_rol_actual = 'Estudiante' AND p_rol_nuevo <> 'Estudiante' THEN
    SELECT (SELECT COUNT(*) FROM matricula     WHERE Id_Estudiante = p_id_usuario)
         + (SELECT COUNT(*) FROM entrega_tarea WHERE Id_Estudiante = p_id_usuario)
         + (SELECT COUNT(*) FROM calificacion  WHERE Id_Estudiante = p_id_usuario)
         + (SELECT COUNT(*) FROM asistencia    WHERE Id_Estudiante = p_id_usuario)
      INTO v_existe;
    IF v_existe > 0 THEN
      ROLLBACK;
      SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No se puede cambiar el rol: el usuario es Estudiante con registros académicos. Limpia/archiva dependencias primero.';
    END IF;
  END IF;

  -- Actualizar datos base
  UPDATE usuario
     SET Nombre     = p_nombre,
         Email      = v_email_limpio,
         Telefono   = p_telefono,
         Rol        = p_rol_nuevo,
         Estado     = p_estado,
         Contrasena = COALESCE(p_contrasena, Contrasena)
   WHERE Id_Usuario = p_id_usuario;

  -- Si cambia de rol, borrar subtipos previos
  IF v_rol_actual <> p_rol_nuevo THEN
    DELETE FROM padre      WHERE Id_Padre       = p_id_usuario;
    DELETE FROM docente    WHERE Id_Docente     = p_id_usuario;
    DELETE FROM estudiante WHERE Id_Estudiante  = p_id_usuario;
  END IF;

  -- Crear/actualizar subtipo segun rol nuevo
  IF p_rol_nuevo = 'Padre' THEN
      INSERT INTO padre (Id_Padre, Telefono)
      VALUES (p_id_usuario, p_telefono)
      ON DUPLICATE KEY UPDATE Telefono = VALUES(Telefono);
  ELSEIF p_rol_nuevo = 'Docente' THEN
      INSERT INTO docente (Id_Docente, Especialidad)
      VALUES (p_id_usuario, p_especialidad)
      ON DUPLICATE KEY UPDATE Especialidad = VALUES(Especialidad);
  ELSEIF p_rol_nuevo = 'Estudiante' THEN
      INSERT INTO estudiante (Id_Estudiante, Grado, Seccion)
      VALUES (p_id_usuario, p_grado, p_seccion)
      ON DUPLICATE KEY UPDATE Grado = VALUES(Grado), Seccion = VALUES(Seccion);
  END IF;

  COMMIT;

  -- Devolver registro actualizado
  CALL obtenerUsuarioDetalle(p_id_usuario);
END
//
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `aulavirtual`.`vw_usuarios_detalle` AS
    SELECT 
        `u`.`Id_Usuario` AS `Id_Usuario`,
        `u`.`Nombre` AS `Nombre`,
        `u`.`Email` AS `Email`,
        `u`.`Telefono` AS `Telefono`,
        `u`.`Rol` AS `Rol`,
        `u`.`Estado` AS `Estado`,
        `d`.`Especialidad` AS `Especialidad`,
        `e`.`Grado` AS `Grado`,
        `e`.`Seccion` AS `Seccion`,
        `p`.`Id_Padre` IS NOT NULL AS `EsPadre`,
        `d`.`Id_Docente` IS NOT NULL AS `EsDocente`,
        `e`.`Id_Estudiante` IS NOT NULL AS `EsEstudiante`
    FROM
        (((`aulavirtual`.`usuario` `u`
        LEFT JOIN `aulavirtual`.`padre` `p` ON (`p`.`Id_Padre` = `u`.`Id_Usuario`))
        LEFT JOIN `aulavirtual`.`docente` `d` ON (`d`.`Id_Docente` = `u`.`Id_Usuario`))
        LEFT JOIN `aulavirtual`.`estudiante` `e` ON (`e`.`Id_Estudiante` = `u`.`Id_Usuario`))
//